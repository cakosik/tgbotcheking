import asyncio
import logging
import os
import re
import sqlite3
import time
from io import BytesIO

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from PIL import Image
import pytesseract

# =================== –ù–ê–°–¢–†–û–ô–ö–ò ===================
API_TOKEN = "7919356847:AAHHdCT180UMA4cNpwOWNFPwILIRFDLu2E0"          # <‚Äî –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMINS = [6194786755, 8183369219]          # <‚Äî –¥–≤–∞ user_id –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–º –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç)

# –î–ª—è Termux –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∂—ë—Å—Ç–∫–æ —É–∫–∞–∂–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫
pytesseract.pytesseract.tesseract_cmd = "tesseract"

logging.basicConfig(level=logging.INFO)
bot = Bot(API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

DB_PATH = "bot.db"


# =================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ===================
def db_connect():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def db_init():
    conn = db_connect()
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cur.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            views INTEGER NOT NULL,
            price INTEGER NOT NULL,
            ts   DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tariffs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            min_views INTEGER NOT NULL,
            max_views INTEGER NOT NULL,
            price INTEGER NOT NULL,
            UNIQUE(min_views, max_views)
        )
    """)
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    defaults = [
        (100, 200, 55),
        (250, 500, 175),
        (500, 2000, 300),
    ]
    for mn, mx, pr in defaults:
        cur.execute("""
            INSERT OR IGNORE INTO tariffs (min_views, max_views, price)
            VALUES (?, ?, ?)
        """, (mn, mx, pr))
    conn.commit()
    conn.close()

def tariffs_all():
    conn = db_connect()
    rows = conn.execute("SELECT min_views, max_views, price FROM tariffs ORDER BY min_views ASC").fetchall()
    conn.close()
    return rows

def get_price_for_views(views: int) -> int:
    conn = db_connect()
    row = conn.execute(
        "SELECT price FROM tariffs WHERE ? BETWEEN min_views AND max_views LIMIT 1",
        (views,)
    ).fetchone()
    conn.close()
    return row["price"] if row else 0

def set_price_for_range(mn: int, mx: int, price: int):
    conn = db_connect()
    cur = conn.cursor()
    # –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–∏–º
    cur.execute("""
        UPDATE tariffs SET price=? WHERE min_views=? AND max_views=?
    """, (price, mn, mx))
    if cur.rowcount == 0:
        cur.execute("""
            INSERT INTO tariffs (min_views, max_views, price) VALUES (?, ?, ?)
        """, (mn, mx, price))
    conn.commit()
    conn.close()

def add_stat_row(views: int, price: int):
    conn = db_connect()
    conn.execute("INSERT INTO stats (views, price) VALUES (?, ?)", (views, price))
    conn.commit()
    conn.close()

def get_all_stats():
    conn = db_connect()
    rows = conn.execute("SELECT views, price, ts FROM stats ORDER BY id ASC").fetchall()
    totals = conn.execute("SELECT COALESCE(SUM(views),0) AS tv, COALESCE(SUM(price),0) AS tr FROM stats").fetchone()
    conn.close()
    return rows, totals["tv"], totals["tr"]

def reset_all_stats():
    conn = db_connect()
    conn.execute("DELETE FROM stats")
    conn.commit()
    conn.close()


# =================== –£–¢–ò–õ–ò–¢–´ ===================
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def extract_views_from_text(text: str):
    """
    –î–æ—Å—Ç–∞—ë–º –í–°–ï –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
      - 1 234 / 1,234 / 1234
      - 2.3k / 2,3k / 2.3K / 2,3–ö / 2–∫ / 2–ö (—Ç—ã—Å)
      - 1.2m / 1,2m / 1.2M / 1,2–ú / 1–º / 1–ú (–º–ª–Ω)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ int.
    """
    if not text:
        return []

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ
    t = text.replace("\u00A0", " ").lower()

    results = []

    # k / m —Å –¥—Ä–æ–±—è–º–∏
    for m in re.findall(r"(\d+(?:[.,]\d+)?)\s*([km–∫–º])", t, flags=re.IGNORECASE):
        num_str, suffix = m
        num = float(num_str.replace(",", "."))
        if suffix in ("k", "–∫"):
            val = int(round(num * 1000))
        else:  # m / –º
            val = int(round(num * 1_000_000))
        results.append(val)

    # —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á: 1 234, 1,234
    for m in re.findall(r"\b\d{1,3}(?:[ .,]\d{3})+\b", t):
        val = int(re.sub(r"[ .,]", "", m))
        results.append(val)

    # –æ–±—ã—á–Ω—ã–µ —Ü–µ–ª—ã–µ
    for m in re.findall(r"\b\d+\b", t):
        results.append(int(m))

    # —Ñ–∏–ª—å—Ç—Ä "–ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
    filtered = [n for n in results if 50 <= n <= 5_000_000]

    # –º–æ–∂–Ω–æ –Ω–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —Ç.–∫. –Ω–∞ —Å–∫—Ä–∏–Ω–µ —É –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Å–≤–æ–∏ —Ü–∏—Ñ—Ä—ã
    return filtered

async def process_views_and_reply(message: types.Message, views_list: list[int]):
    added_lines = []
    total_views = 0
    total_rub = 0

    for v in views_list:
        price = get_price_for_views(v)
        if price > 0:
            add_stat_row(v, price)
            added_lines.append(f"{v} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")
            total_views += v
            total_rub += price

    if added_lines:
        chunks = []
        # —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã, —Ä–∞–∑–æ–±—å—ë–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        header = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n"
        body = "\n".join(added_lines)
        summary = f"\n\nüìä –ò—Ç–æ–≥–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:\nüëÅ {total_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\nüí∞ {total_rub} —Ä—É–±"
        text = header + body + summary
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        for i in range(0, len(text), 3500):
            chunks.append(text[i:i+3500])
        for idx, ch in enumerate(chunks):
            await message.answer(ch if idx == 0 else ch)
    else:
        await message.answer("‚ö†Ô∏è –ù–∞—à—ë–ª —á–∏—Å–ª–∞, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Ç–∞—Ä–∏—Ñ—ã.")


# =================== –•–ï–ù–î–õ–ï–†–´ ===================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n"
        "üìä –¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã (–∑–∞ –æ–¥–Ω–æ –≤–∏–¥–µ–æ):\n" +
        "\n".join([f"{mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {pr} —Ä—É–±" for mn, mx, pr in tariffs_all()]) +
        "\n\n‚ö° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É\n"
        "/stat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/prices ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã\n"
        "/setprice <min>-<max> <price> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n\n"
        "üí° –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª)\n"
        "–∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø–æ—Å—á–∏—Ç–∞—é."
    )
    await message.answer(text)

@dp.message(Command("ping"))
async def ping_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    t0 = time.perf_counter()
    tmp = await message.answer("üèì –ü–∏–Ω–≥‚Ä¶")
    t1 = time.perf_counter()
    ms = round((t1 - t0) * 1000, 2)
    await tmp.edit_text(f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–¥–µ—Ä–∂–∫–∞: <b>{ms} –º—Å</b>")

@dp.message(Command("stat"))
async def stat_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    rows, total_views, total_rub = get_all_stats()
    if not rows:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return
    lines = []
    for idx, r in enumerate(rows, 1):
        lines.append(f"{idx}. {r['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {r['price']} —Ä—É–±  ({r['ts']})")
    text = "\n".join(lines)
    text += f"\n\nüìä –ò–¢–û–ì–û:\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}\nüí∞ –°—É–º–º–∞: {total_rub} —Ä—É–±"
    # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(0, len(text), 3500):
        await message.answer(text[i:i+3500])

@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    reset_all_stats()
    await message.answer("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")

@dp.message(Command("prices"))
async def prices_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    t = "\n".join([f"{mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {pr} —Ä—É–±" for mn, mx, pr in tariffs_all()])
    await message.answer("üìã –¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n" + (t or "–Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤"))

@dp.message(Command("setprice"))
async def setprice_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /setprice 100-200 60  –ò–õ–ò  /setprice 100 200 60
    try:
        args = message.text.split(maxsplit=1)[1]
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/setprice 100-200 60</code> –∏–ª–∏ <code>/setprice 100 200 60</code>")
        return

    mn = mx = price = None
    # –ø–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ "100-200 60"
    m = re.match(r"\s*(\d+)\s*-\s*(\d+)\s+(\d+)\s*$", args)
    if m:
        mn, mx, price = int(m.group(1)), int(m.group(2)), int(m.group(3))
    else:
        # –ø–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ "100 200 60"
        m2 = re.match(r"\s*(\d+)\s+(\d+)\s+(\d+)\s*$", args)
        if m2:
            mn, mx, price = int(m2.group(1)), int(m2.group(2)), int(m2.group(3))

    if not all([mn, mx, price]) or mn >= mx:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/setprice 250-500 180</code>")
        return

    set_price_for_range(mn, mx, price)
    await message.answer(f"‚úÖ –û–±–Ω–æ–≤–∏–ª —Ç–∞—Ä–∏—Ñ: {mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")

# ---------- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∏—Å–µ–ª (–æ–¥–Ω–æ –∏–ª–∏ –º–Ω–æ–≥–æ) ----------
@dp.message(F.text)
async def handle_text_numbers(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    # –¥–æ—Å—Ç–∞—ë–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1.2k –∏ —Ç.–ø.)
    views_list = extract_views_from_text(message.text)
    if not views_list:
        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –º–æ–ª—á–∏–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
        return
    await process_views_and_reply(message, views_list)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω–æ–≤ ----------
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file = await bot.get_file(message.photo[-1].file_id)
        downloaded = await bot.download_file(file.file_path)

        # —á–∏—Ç–∞–µ–º –∫–∞–∫ PIL.Image
        image = Image.open(BytesIO(downloaded.read()))

        # OCR
        text = pytesseract.image_to_string(image, lang="eng+rus")
        views_list = extract_views_from_text(text)

        if not views_list:
            await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞ –Ω–∞ —Å–∫—Ä–∏–Ω–µ.")
            return

        await process_views_and_reply(message, views_list)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

# =================== –ó–ê–ü–£–°–ö ===================
async def main():
    db_init()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
