# bot.py ‚Äî –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ–¥ Termux (aiogram 3.7+)
# - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤—É–º –∞–¥–º–∏–Ω–∞–º (ADMINS)
# - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ (–æ–¥–Ω–æ –∏–ª–∏ –º–Ω–æ–≥–æ —á–∏—Å–µ–ª –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
# - —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Å–æ —Å–∫—Ä–∏–Ω–æ–≤ (OCR, Tesseract)
# - /ping ‚Äî –ø–∏–Ω–≥ –≤ –º—Å
# - /stat –∏ /stats ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π + –∏—Ç–æ–≥–∏
# - /reset ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# - /prices ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
# - /setprice 100-200 60 ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ)
# - /editstat <id> <views> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (–ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º)
# - /calc <views> ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
# - –∫—Ä–∞—Å–∏–≤—ã–π /start —Å —Ñ–æ—Ç–æ, —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/–ü–æ–º–æ—â—å/–¢–∞—Ä–∏—Ñ—ã)
# - —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ SQLite (bot.db), –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏

import asyncio
import logging
import re
import sqlite3
import time
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from PIL import Image
import pytesseract

# =================== –ù–ê–°–¢–†–û–ô–ö–ò ===================
API_TOKEN = "8376117469:AAGowNR9l6-BJXTmJ2mdHD_50QP-Whf0Q5k"            # ‚Üê –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å—é–¥–∞
ADMINS = [8183369219, 6194786755]   # ‚Üê –¥–≤–∞ Telegram user_id, —Ç–æ–ª—å–∫–æ –∏–º –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç

# –î–ª—è Termux –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫
pytesseract.pytesseract.tesseract_cmd = "tesseract"

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

DB_PATH = "bot.db"


# =================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ===================
def db_connect():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def db_init():
    conn = db_connect()
    cur = conn.cursor()
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–∞–∂–¥–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            views INTEGER NOT NULL,
            price INTEGER NOT NULL,
            ts   DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    # –¢–∞—Ä–∏—Ñ—ã (–¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ -> —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤–∏–¥–µ–æ)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tariffs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            min_views INTEGER NOT NULL,
            max_views INTEGER NOT NULL,
            price INTEGER NOT NULL,
            UNIQUE(min_views, max_views)
        )
    """)
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    defaults = [
        (100, 200, 55),
        (250, 500, 175),
        (500, 2000, 300),
    ]
    for mn, mx, pr in defaults:
        cur.execute("""
            INSERT OR IGNORE INTO tariffs (min_views, max_views, price)
            VALUES (?, ?, ?)
        """, (mn, mx, pr))
    conn.commit()
    conn.close()

def tariffs_all():
    conn = db_connect()
    rows = conn.execute(
        "SELECT min_views, max_views, price FROM tariffs ORDER BY min_views ASC"
    ).fetchall()
    conn.close()
    return rows

def get_price_for_views(views: int) -> int:
    conn = db_connect()
    row = conn.execute(
        "SELECT price FROM tariffs WHERE ? BETWEEN min_views AND max_views LIMIT 1",
        (views,)
    ).fetchone()
    conn.close()
    return int(row["price"]) if row else 0

def set_price_for_range(mn: int, mx: int, price: int):
    conn = db_connect()
    cur = conn.cursor()
    cur.execute("UPDATE tariffs SET price=? WHERE min_views=? AND max_views=?", (price, mn, mx))
    if cur.rowcount == 0:
        cur.execute("INSERT INTO tariffs (min_views, max_views, price) VALUES (?, ?, ?)", (mn, mx, price))
    conn.commit()
    conn.close()

def add_stat_row(views: int, price: int):
    conn = db_connect()
    conn.execute("INSERT INTO stats (views, price) VALUES (?, ?)", (views, price))
    conn.commit()
    conn.close()

def get_all_stats():
    conn = db_connect()
    rows = conn.execute("SELECT id, views, price, ts FROM stats ORDER BY id ASC").fetchall()
    totals = conn.execute("SELECT COALESCE(SUM(views),0) AS tv, COALESCE(SUM(price),0) AS tr FROM stats").fetchone()
    conn.close()
    return rows, int(totals["tv"]), int(totals["tr"])

def reset_all_stats():
    conn = db_connect()
    conn.execute("DELETE FROM stats")
    conn.commit()
    conn.close()

def update_stat_row(row_id: int, new_views: int) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —Å—Ç–∞–≤–∏—Ç –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç price –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False ‚Äî –∏–∑–º–µ–Ω–µ–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ.
    """
    new_price = get_price_for_views(new_views)
    if new_price == 0:
        return False
    conn = db_connect()
    cur = conn.cursor()
    cur.execute("UPDATE stats SET views=?, price=? WHERE id=?", (new_views, new_price, row_id))
    conn.commit()
    changed = cur.rowcount > 0
    conn.close()
    return changed


# =================== –£–¢–ò–õ–ò–¢–´ ===================
def is_admin(uid: int) -> bool:
    return uid in ADMINS

def extract_views_from_text(text: str):
    """
    –î–æ—Å—Ç–∞—ë–º –í–°–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
      - 1 234 / 1,234 / 1234
      - 2.3k / 2,3k / 2–∫ / 2K (—Ç—ã—Å—è—á–∏)
      - 1.2m / 1,2m / 1–º / 1M (–º–∏–ª–ª–∏–æ–Ω—ã)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ int –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [50, 5_000_000].
    """
    if not text:
        return []

    t = text.replace("\u00A0", " ").lower()
    results = []

    # k/m —Å –¥—Ä–æ–±—è–º–∏
    for num_str, suffix in re.findall(r"(\d+(?:[.,]\d+)?)\s*([km–∫–º])", t, flags=re.IGNORECASE):
        num = float(num_str.replace(",", "."))
        if suffix in ("k", "–∫"):
            results.append(int(round(num * 1000)))
        else:
            results.append(int(round(num * 1_000_000)))

    # —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á: 1 234, 1,234
    for m in re.findall(r"\b\d{1,3}(?:[ .,]\d{3})+\b", t):
        results.append(int(re.sub(r"[ .,]", "", m)))

    # –æ–±—ã—á–Ω—ã–µ —Ü–µ–ª—ã–µ
    for m in re.findall(r"\b\d+\b", t):
        results.append(int(m))

    # —Ñ–∏–ª—å—Ç—Ä "–ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
    return [n for n in results if 50 <= n <= 5_000_000]

async def process_views_and_reply(message: types.Message, views_list: list[int]):
    """
    –°—á–∏—Ç–∞–µ—Ç —Ü–µ–Ω—É –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–∏—à–µ—Ç –≤ –ë–î, –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    added_lines = []
    total_views = 0
    total_rub = 0

    for v in views_list:
        price = get_price_for_views(v)
        if price > 0:
            add_stat_row(v, price)
            added_lines.append(f"{v} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")
            total_views += v
            total_rub += price

    if added_lines:
        header = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n"
        body = "\n".join(added_lines)
        text = header + body
        # –¥–µ–ª–∏–º –Ω–∞ –∫—É—Å–∫–∏, —á—Ç–æ–±—ã –Ω–µ —É—Ç–∫–Ω—É—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
        for i in range(0, len(text), 3500):
            await message.answer(text[i:i+3500])
    else:
        await message.answer("‚ö†Ô∏è –ù–∞—à—ë–ª —á–∏—Å–ª–∞, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Ç–∞—Ä–∏—Ñ—ã.")


# =================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ===================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
    kb.button(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_prices")
    kb.adjust(1)

    photo_url = "https://i.ibb.co/rxSZmLC/start-banner.jpg"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π
    tariffs_text = "\n".join([f"{mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {pr} —Ä—É–±" for mn, mx, pr in tariffs_all()])

    await message.answer_photo(
        photo=photo_url,
        caption=(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n"
            "‚ö° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥\n"
            "/stat, /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/prices ‚Äî —Ç–∞—Ä–∏—Ñ—ã\n"
            "/setprice ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ\n"
            "/editstat ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "/calc ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
            "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n{tariffs_text or '‚Äî (—Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ—Ç)'}"
        ),
        reply_markup=kb.as_markup()
    )

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "‚Ä¢ /ping ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞.\n"
        "‚Ä¢ /stat –∏–ª–∏ /stats ‚Äî –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π.\n"
        "‚Ä¢ /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "‚Ä¢ /prices ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤.\n"
        "‚Ä¢ /setprice <min>-<max> <price> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ.\n"
        "‚Ä¢ /editstat <id> <views> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –∑–∞–ø–∏—Å–∏; —Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º.\n"
        "‚Ä¢ /calc <views> ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É).\n\n"
        "üí° –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏) –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø–æ—Å—á–∏—Ç–∞—é."
    )
    await message.answer(text)

@dp.message(Command("ping"))
async def ping_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    t0 = time.perf_counter()
    tmp = await message.answer("üèì –ü–∏–Ω–≥‚Ä¶")
    t1 = time.perf_counter()
    ms = round((t1 - t0) * 1000, 2)
    await tmp.edit_text(f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–¥–µ—Ä–∂–∫–∞: <b>{ms} –º—Å</b>")

@dp.message(Command("prices"))
async def prices_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    t = "\n".join([f"{mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {pr} —Ä—É–±" for mn, mx, pr in tariffs_all()])
    await message.answer("üìã –¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n" + (t or "‚Äî (–Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤)"))

@dp.message(Command("setprice"))
async def setprice_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    # –§–æ—Ä–º–∞—Ç—ã:
    #   /setprice 100-200 60
    #   /setprice 100 200 60
    try:
        args = message.text.split(maxsplit=1)[1]
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/setprice 100-200 60</code> –∏–ª–∏ <code>/setprice 100 200 60</code>")
        return

    mn = mx = price = None
    m = re.match(r"\s*(\d+)\s*-\s*(\d+)\s+(\d+)\s*$", args)
    if m:
        mn, mx, price = int(m.group(1)), int(m.group(2)), int(m.group(3))
    else:
        m2 = re.match(r"\s*(\d+)\s+(\d+)\s+(\d+)\s*$", args)
        if m2:
            mn, mx, price = int(m2.group(1)), int(m2.group(2)), int(m2.group(3))

    if not all([mn, mx, price]) or mn >= mx:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: <code>/setprice 250-500 180</code>")
        return

    set_price_for_range(mn, mx, price)
    await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω: {mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")

@dp.message(Command("stat"))
@dp.message(Command("stats"))
async def stat_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    rows, total_views, total_rub = get_all_stats()
    if not rows:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return
    lines = []
    for r in rows:
        lines.append(f"#{r['id']}. {r['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {r['price']} —Ä—É–±  ({r['ts']})")
    text = "\n".join(lines)
    text += f"\n\nüìä –ò–¢–û–ì–û:\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}\nüí∞ –°—É–º–º–∞: {total_rub} —Ä—É–±"
    for i in range(0, len(text), 3500):
        await message.answer(text[i:i+3500])

@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    reset_all_stats()
    await message.answer("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message(Command("editstat"))
async def editstat_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    try:
        _, row_id, new_views = message.text.split()
        row_id, new_views = int(row_id), int(new_views)
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/editstat <id> <views></code>")
        return
    ok = update_stat_row(row_id, new_views)
    if ok:
        await message.answer(f"‚úèÔ∏è –ó–∞–ø–∏—Å—å #{row_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞).")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —ç—Ç–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")

@dp.message(Command("calc"))
async def calc_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    try:
        views = int(message.text.split()[1])
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/calc 1234</code>")
        return
    price = get_price_for_views(views)
    if price > 0:
        await message.answer(f"üî¢ {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–± (–ø–æ —Ç–∞—Ä–∏—Ñ–∞–º)")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")


# ---------- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∏—Å–µ–ª (–æ–¥–Ω–æ –∏–ª–∏ –º–Ω–æ–≥–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏) ----------
@dp.message(F.text)
async def handle_text_numbers(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    views_list = extract_views_from_text(message.text)
    if not views_list:
        return  # –∏–≥–Ω–æ—Ä–∏–º –Ω–µ-—á–∏—Å–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await process_views_and_reply(message, views_list)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω–æ–≤ ----------
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    try:
        file = await bot.get_file(message.photo[-1].file_id)
        downloaded = await bot.download_file(file.file_path)
        image = Image.open(BytesIO(downloaded.read()))

        # OCR: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º eng+rus, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî fallback –Ω–∞ eng
        try:
            text = pytesseract.image_to_string(image, lang="eng+rus")
        except Exception:
            text = pytesseract.image_to_string(image, lang="eng")

        views_list = extract_views_from_text(text)
        if not views_list:
            await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞ –Ω–∞ —Å–∫—Ä–∏–Ω–µ.")
            return

        await process_views_and_reply(message, views_list)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")


# =================== CALLBACK-–ö–ù–û–ü–ö–ò –ü–û–î /start ===================
@dp.callback_query(F.data == "show_stats")
async def cb_stats(callback: types.CallbackQuery):
    # –∑–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if not is_admin(callback.from_user.id):
        await callback.answer()
        return

    rows, total_views, total_rub = get_all_stats()
    if not rows:
        await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
    else:
        lines = []
        for r in rows:
            lines.append(f"#{r['id']}. {r['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {r['price']} —Ä—É–±  ({r['ts']})")
        text = "\n".join(lines)
        text += f"\n\nüìä –ò–¢–û–ì–û:\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}\nüí∞ –°—É–º–º–∞: {total_rub} —Ä—É–±"
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i in range(0, len(text), 3500):
            await callback.message.answer(text[i:i+3500])
    await callback.answer()

@dp.callback_query(F.data == "show_help")
async def cb_help(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer()
        return
    text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞:</b>\n\n"
        "‚Ä¢ /ping ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞.\n"
        "‚Ä¢ /stat ‚Äî –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
        "‚Ä¢ /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "‚Ä¢ /prices ‚Äî —Ç–∞—Ä–∏—Ñ—ã.\n"
        "‚Ä¢ /setprice ‚Äî —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ.\n"
        "‚Ä¢ /editstat ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n"
        "‚Ä¢ /calc ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.\n\n"
        "üí° –ú–æ–∂–Ω–æ –∫–∏–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω."
    )
    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "show_prices")
async def cb_prices(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer()
        return
    t = "\n".join([f"{mn}-{mx} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {pr} —Ä—É–±" for mn, mx, pr in tariffs_all()])
    await callback.message.answer("üìã –¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n" + (t or "‚Äî (–Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤)"))
    await callback.answer()


# =================== –ó–ê–ü–£–°–ö ===================
async def main():
    db_init()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

