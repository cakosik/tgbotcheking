import logging
import re
import pytesseract
from PIL import Image
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "7919356847:AAHHdCT180UMA4cNpwOWNFPwILIRFDLu2E0"

# –î–ª—è Termux –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞—Ç—å –ù–ï –Ω—É–∂–Ω–æ
# –î–ª—è Windows –±—ã–ª–æ –±—ã —Ç–∞–∫:
# pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" (–ø–∞–º—è—Ç—å –≤ —Ä–∞–Ω—Ç–∞–π–º–µ)
stats = []  # [(–ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —Ü–µ–Ω–∞), ...]

# === –¢–∞—Ä–∏—Ñ—ã ===
def get_price(views: int) -> int:
    if 100 <= views <= 200:
        return 55
    elif 250 <= views <= 500:
        return 175
    elif 500 <= views <= 2000:
        return 300
    return 0

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞\n"
        "/stat ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/reset ‚Äî –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "‚ûï –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã) –∏–ª–∏ —Ñ–æ—Ç–æ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º ‚Äî —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é!"
    )
    await message.answer(text)

@dp.message(Command("ping"))
async def ping_cmd(message: types.Message):
    await message.answer("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@dp.message(Command("stat"))
async def stat_cmd(message: types.Message):
    if not stats:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return

    text_lines = []
    total_views = 0
    total_rub = 0

    for i, (views, price) in enumerate(stats, start=1):
        text_lines.append(f"{i}. üëÅ {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = üí∞ {price} —Ä—É–±")
        total_views += views
        total_rub += price

    text_lines.append("\nüìä –ò–¢–û–ì–û:")
    text_lines.append(f"üëÅ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}")
    text_lines.append(f"üí∞ –í—Å–µ–≥–æ —Å—É–º–º–∞: {total_rub} —Ä—É–±")

    await message.answer("\n".join(text_lines))

@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    stats.clear()
    await message.answer("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª ===
@dp.message(lambda m: m.text and m.text.isdigit())
async def handle_number(message: types.Message):
    views = int(message.text)
    price = get_price(views)
    if price > 0:
        stats.append((views, price))
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")
    else:
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω–æ–≤ ===
@dp.message(lambda m: m.photo)
async def handle_photo(message: types.Message):
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path
        downloaded = await bot.download_file(file_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        image = Image.open(BytesIO(downloaded.read()))

        # OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        text = pytesseract.image_to_string(image, lang="eng+rus")

        # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        numbers = re.findall(r"\d+", text)
        numbers = list(map(int, numbers))

        if not numbers:
            await message.answer("‚ö†Ô∏è –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ –Ω–∞—à—ë–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.")
            return

        total_added = 0
        added_lines = []
        for num in numbers:
            price = get_price(num)
            if price > 0:
                stats.append((num, price))
                added_lines.append(f"üëÅ {num} = üí∞ {price} —Ä—É–±")
                total_added += price

        if added_lines:
            response = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ —Å–∫—Ä–∏–Ω–∞:\n" + "\n".join(added_lines)
            response += f"\n\nüí∞ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {total_added} —Ä—É–±"
            await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –ù–∞—à—ë–ª —á–∏—Å–ª–∞, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Ç–∞—Ä–∏—Ñ—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

