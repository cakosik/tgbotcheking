import asyncio
import time
import sqlite3
import pytesseract
from PIL import Image
import io

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TOKEN = "7919356847:AAHHdCT180UMA4cNpwOWNFPwILIRFDLu2E0"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –¥–≤–∞ –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ id –∏–∑ Telegram)
ADMINS = [6194786755, 987654321]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect("stats.db")
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    views INTEGER,
    price INTEGER
)
""")
conn.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS


# –¶–µ–Ω—ã –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
def get_price(views: int) -> int:
    if 100 <= views <= 200:
        return 55
    elif 250 <= views <= 500:
        return 175
    elif 500 <= views <= 2000:
        return 300
    return 0


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def add_stat(views: int, price: int):
    cursor.execute("INSERT INTO stats (views, price) VALUES (?, ?)", (views, price))
    conn.commit()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats():
    cursor.execute("SELECT views, price FROM stats")
    rows = cursor.fetchall()
    total_views = sum(r[0] for r in rows)
    total_rub = sum(r[1] for r in rows)
    return rows, total_views, total_rub


# –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def reset_stats():
    cursor.execute("DELETE FROM stats")
    conn.commit()


# ========== –ö–æ–º–∞–Ω–¥—ã ==========

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n"
        "üìä –¢–∞—Ä–∏—Ñ—ã:\n"
        "100‚Äì200 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = 55 —Ä—É–±\n"
        "250‚Äì500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = 175 —Ä—É–±\n"
        "500‚Äì2000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = 300 —Ä—É–±\n\n"
        "‚ö° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞\n"
        "/stat ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Ä—É–±–ª–µ–π\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
    )
    await message.answer(text)


@dp.message(Command("ping"))
async def ping_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    start = time.time()
    await message.answer("üèì –ü–∏–Ω–≥...")
    end = time.time()
    ms = round((end - start) * 1000, 2)
    await message.answer(f"üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {ms} –º—Å")


@dp.message(Command("stat"))
async def stat_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    rows, total_views, total_rub = get_stats()
    if not rows:
        await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return

    lines = [f"{idx}. {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±" for idx, (views, price) in enumerate(rows, 1)]
    text = "\n".join(lines)
    text += f"\n\nüìä –ò–¢–û–ì–û:\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views}\nüí∞ –°—É–º–º–∞: {total_rub} —Ä—É–±"
    await message.answer(text)


@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    reset_stats()
    await message.answer("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")


# ========== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ==========

@dp.message()
async def process_views_or_screenshot(message: types.Message):
    if not is_admin(message.from_user.id):
        return  

    # üì∏ –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
    if message.photo:
        file = await bot.get_file(message.photo[-1].file_id)
        file_bytes = await bot.download_file(file.file_path)
        image = Image.open(io.BytesIO(file_bytes.read()))

        # OCR ‚Üí —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(image, lang="eng+rus")

        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞
        numbers = [int(s) for s in text.replace(",", "").split() if s.isdigit()]
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
        views_list = [n for n in numbers if 50 <= n <= 5_000_000]

        if not views_list:
            await message.answer("‚ùå –ù–µ –Ω–∞—à—ë–ª –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.")
            return

        added = []
        for views in views_list:
            price = get_price(views)
            if price > 0:
                add_stat(views, price)
                added.append(f"{views} = {price} —Ä—É–±")

        if added:
            text = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:\n" + "\n".join(added)
        else:
            text = "‚ö†Ô∏è –ß–∏—Å–ª–∞ –Ω–∞—à—ë–ª, –Ω–æ –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ç–∞—Ä–∏—Ñ—ã."
        await message.answer(text)
        return

    # üìù –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–º —á–∏—Å–ª–æ
    try:
        views = int(message.text.strip())
    except (ValueError, AttributeError):
        return

    price = get_price(views)
    if price == 0:
        await message.answer("‚ö†Ô∏è –ß–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–∞—Ä–∏—Ñ—ã.")
        return

    add_stat(views, price)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = {price} —Ä—É–±")


# ========== –ó–∞–ø—É—Å–∫ ==========

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
